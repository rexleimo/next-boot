// 缓存版本号 - 每次发布时更新此版本号
const CACHE_VERSION = '<%= buildId %>';
const CACHE_NAME = `app-static-${CACHE_VERSION}`;

const STATIC_ASSETS = <%- cacheList %>;

// 安装事件 - 预缓存静态资源
self.addEventListener('install', event => {
  event.waitUntil(
    caches.open(CACHE_NAME).then((cache)=>{
        return cache.addAll(STATIC_ASSETS);
    }).then(() => self.skipWaiting())
  );
});

// 激活事件 - 清理旧版本缓存
self.addEventListener('activate', event => {
  console.log('[ServiceWorker] Activate');
  event.waitUntil(
    caches.keys().then(cacheNames=>{
        return Promise.all(
            cacheNames.map(cacheName => {
                if (cacheName !== CACHE_NAME) {
                    return caches.delete(cacheName);
                }
            })
        )
    })
    .then(() => self.clients.claim())
  );
});

// 判断是否是静态资源
function isStaticAsset(url) {
  return url.match(
    /\.(css|js|png|jpg|jpeg|gif|ico|svg|woff|woff2|ttf|eot|avif|webp)(\?.*)?$/
  );
}

// 网络请求处理
self.addEventListener('fetch', event => {
  const url = event.request.url;
  console.log('fetch url', url);
  if (!(url.startsWith('http://') || url.startsWith('https://'))) {
    return;
  }

  if (isStaticAsset(url)) {
    event.respondWith(¬
      caches.match(event.request).then(cacheResponse => {
        if (cacheResponse) {
          return cacheResponse;
        }

        return fetch(event.request).then(fetchResponse => {
          if (!fetchResponse.ok) {
            // 如果请求失败，直接返回失败的响应
            return fetchResponse;
          }

          const responseClone = fetchResponse.clone();
          caches
            .open(CACHE_NAME)
            .then(cache =>
              console.debug('aaa', cache.put(event.request.url, responseClone))
            );
          return fetchResponse;
        });
      })
    );
  }
});

// 添加消息处理，让页面可以控制更新时机
self.addEventListener('message', event => {
  if (event.data === 'SKIP_WAITING') {
    console.log('[ServiceWorker] Skip waiting message received');
    self.skipWaiting();
  }
});